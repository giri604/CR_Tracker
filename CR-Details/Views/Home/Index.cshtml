@model CR_Details.Models.CRDetails
@{
    ViewBag.Title = "Home Page";
}

<script>

        var formdata = new FormData(); //FormData object

        var keyBool = null;
        var projBool = null;
        function keyProjectsResult(radio) {
            
            var selected = radio.value;
            if (selected == "Yes")
                keyBool = true;
            else if (selected == "No")
                keyBool = false;
        }

        function ProjectCompletedScheduleResult(radio) {
            var selected = radio.value;
            if (selected == "Yes")
                projBool = true;
            else if (selected == "No")
                projBool = false;
        }

        $(document).ready(function () {
            var disableDates = [];
            var options = {};
            options.url = "/Home/GetExpectedDates";
            options.dataType = "json";
            options.contentType = "application/json";
            options.success = function (ExpectedDates) {
                //disableDates = ExpectedDates;
                disableDates = $.map(ExpectedDates, function (value, index) {
                    return [value];
                });
            };
            options.error = function () {
                AlertModal(getMessage("error"), "Error retrieving ExpectedDates data!.", BootstrapDialog.TYPE_DANGER, function () {
                });
            };
            $.ajax(options);

            var Alldays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
            //var disableDates = ["2012/11/26", "2012/11/28", "2012/12/05"]; // yyyy/MM/dd
            var disableDays = ["Sunday"];

            function ShowDisableDates(date) {
                ymd = date.getFullYear() + "/" + ("0" + (date.getMonth() + 1)).slice(-2) + "/" + ("0" + date.getDate()).slice(-2);
                day = new Date(ymd).getDay();
                if ($.inArray(ymd, disableDates) < 0 && $.inArray(Alldays[day], disableDays) < 0) {
                    return [true, "enabled", "Available"];
                } else {
                    return [false, "disabled", "Un-Available"];
                }
            }

            $(function () {
                $("#ExpectedDate").attr("readonly", "true");
                $("#ExpectedDate").datepicker({
                    beforeShowDay: ShowDisableDates,
                    changeYear: true,
                    changeMonth: true,
                    minDate: 0,
                    dateFormat: "dd-MM-yy",
                    yearRange: "-100:+20",
                });
            });

            $(function () {
                $("#CrTitle").keypress(function (e) {
                    var keyCode = e.keyCode || e.which;

                    $("#CrTitleError").html("");

                    //Regex for Valid Characters i.e. Alphabets and Numbers.
                    var regex = /^[A-Za-z0-9]+$/;

                    //Validate TextBox value against the Regex.
                    var isValid = regex.test(String.fromCharCode(keyCode));
                    if (!isValid) {
                        //$("#CrTitleError").html("Only Alpha-numeric allowed");
                    }

                    return isValid;
                });
            });

            $('#NoOfShowstoppersPostGoLive').keyup(function () {

                this.value = this.value.replace(/[^0-9\.]/g, '');

            });

            $("#NoOfShowstoppersPostGoLive").keypress(function (evt) {
                var charCode = (evt.which) ? evt.which : evt.keyCode;
                if (charCode != 46 && charCode > 31
                    && (charCode < 48 || charCode > 57))
                    return false;

                return true;
            });

            $('#NoOfCRReceivedDuringUAT').keyup(function () {

                this.value = this.value.replace(/[^0-9\.]/g, '');

            });

            $("#NoOfCRReceivedDuringUAT").keypress(function (evt) {
                var charCode = (evt.which) ? evt.which : evt.keyCode;
                if (charCode != 46 && charCode > 31
                    && (charCode < 48 || charCode > 57))
                    return false;

                return true;
            });



            $(function () {
                $("#ProjectCRReceivedDate").attr("readonly", "true");
                $("#FinalProjectCRReceivedDate").attr("readonly", "true");
                $("#UATDeliveryDate").attr("readonly", "true");
                $("#UATSignoffDate").attr("readonly", "true");
                $("#ProjectCRLiveDate").attr("readonly", "true");
                $("#FirstCommittedLiveDate").attr("readonly", "true");

                var $dp2 = $("#ProjectCRReceivedDate");
                $dp2.datepicker({
                    changeYear: true,
                    changeMonth: true,
                    minDate: 0,
                    dateFormat: "dd-MM-yy",
                    yearRange: "-100:+20",
                });

                var $dp3 = $("#FinalProjectCRReceivedDate");
                $dp3.datepicker({
                    changeYear: true,
                    changeMonth: true,
                    minDate: 0,
                    dateFormat: "dd-MM-yy",
                    yearRange: "-100:+20",
                });

                var $dp4 = $("#UATDeliveryDate");
                $dp4.datepicker({
                    changeYear: true,
                    changeMonth: true,
                    minDate: 0,
                    dateFormat: "dd-MM-yy",
                    yearRange: "-100:+20",
                });

                var $dp5 = $("#UATSignoffDate");
                $dp5.datepicker({
                    changeYear: true,
                    changeMonth: true,
                    minDate: 0,
                    dateFormat: "dd-MM-yy",
                    yearRange: "-100:+20",
                });

                var $dp6 = $("#ProjectCRLiveDate");
                $dp6.datepicker({
                    changeYear: true,
                    changeMonth: true,
                    minDate: 0,
                    dateFormat: "dd-MM-yy",
                    yearRange: "-100:+20",
                });

                var $dp7 = $("#FirstCommittedLiveDate");
                $dp7.datepicker({
                    changeYear: true,
                    changeMonth: true,
                    minDate: 0,
                    dateFormat: "dd-MM-yy",
                    yearRange: "-100:+20",
                });
            });

            var me = getUrlVars()["user"];
            if (me != "admin") {
                //alert("normal");
                $('#complexity').hide();
                $('#crRcvDate').hide();
                $('#finalRcvDate').hide();
                $('#UATDate').hide();
                $('#UATSignOffDate').hide();
                $('#crLiveDate').hide();
                $('#fstCommDate').hide();
                $('#lead').hide();
                $('#noCrRcv').hide();
                $('#tat').hide();
                $('#noShowstoppers').hide();
                $('#projCompSchdl').hide();
                $('#manager').hide();
            }
            else {
                //alert("Admin");
            }


            // Read a page's GET URL variables and return them as an associative array.
            function getUrlVars() {
                var vars = [], hash;
                var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
                for (var i = 0; i < hashes.length; i++) {
                    hash = hashes[i].split('=');
                    vars.push(hash[0]);
                    vars[hash[0]] = hash[1];
                }
                return vars;
            }

            //upload file code
            //var formdata = new FormData(); //FormData object

            //$(document).ready(function () {
            $(".select-department-placeholder").prepend("<option value='' disabled selected>Select a department...</option>");
            $(".select-complexity-placeholder").prepend("<option value='' disabled selected>Select a complexity...</option>");
            $(".select-category-placeholder").prepend("<option value='' disabled selected>Select a category...</option>");
            $(".select-lead-placeholder").prepend("<option value='' disabled selected>Select a lead...</option>");
            $(".select-manager-placeholder").prepend("<option value='' disabled selected>Select a manager...</option>");
            var arr = [];
            $("#fileInput").on("change", function () {
              
                var fileInput = $('#fileInput')[0].files;
                //Iterating through each files selected in fileInput
                for (i = 0; i < fileInput.length; i++) {
                    if (arr.indexOf(fileInput[i].name) === -1) {
                        arr.push(fileInput[i].name)

                        var sfilename = fileInput[i].name;
                        let srandomid = Math.random().toString(36).substring(7);

                        formdata.append(sfilename, fileInput[i]);

                        var markup = "<tr id='" + srandomid + "'><td>" + sfilename + "</td><td><a href='#' onclick='DeleteFile(\"" + srandomid + "\",\"" + sfilename +
                            "\")'><span class='glyphicon glyphicon-remove red'></span></a></td></tr>"; // Binding the file name
                        $("#FilesList tbody").append(markup);
                    }
                    else {
                        AlertModal(getMessage("warning"), '"' + fileInput[i].name + '"' + " file already selected", BootstrapDialog.TYPE_DANGER, function () {
                        });
                    }
                }
                chkatchtbl();
                $('#fileInput').val('');
            });


            //$('#fileInput').filestyle({
            //    input: false,
            //    buttonName: 'btn-danger',
            //    iconName: 'glyphicon glyphicon-folder-close',
            //    badge: true
            //});

            function formatDate(date) {
                var d = new Date(date.split("/").reverse().join("-"));
                var dd = d.getDate();
                var mm = d.getMonth() + 1;
                if (mm.toString().length == 1) {
                    mm = ('0' + mm).slice(-2);
                }
                var yy = d.getFullYear();
                var newdate = yy + "-" + mm + "-" + dd;
                //alert(newdate);
                return newdate;
            }


            $("#btnSubmit").click(function () {
                //validation code start here
                var isValid = true;
                if ($("#CrTitle").val() == "" || $("#CrDescription").val() == "null" || $("#CrDescription").val() == null) {
                    console.log("CrTitle is empty");
                    AlertModal(getMessage("error"), getMessage("RequiredCrTitle"), BootstrapDialog.TYPE_DANGER, function () {
                    });
                    isValid = false;
                }
                else if ($("#CrDescription").val() == "" || $("#CrDescription").val() == "null" || $("#CrDescription").val() == null) {
                    console.log("CrDescription is empty");
                    AlertModal(getMessage("error"), getMessage("RequiredCrDescription"), BootstrapDialog.TYPE_DANGER, function () {
                    });
                    isValid = false;
                }
                else if ($("#DepartmentList").val() == "" || $("#DepartmentList").val() == "null" || $("#DepartmentList").val() == null) {
                    console.log("DepartmentList is empty");
                    AlertModal(getMessage("error"), getMessage("RequiredDepartmentList"), BootstrapDialog.TYPE_DANGER, function () {
                    });
                    isValid = false;
                }
                else if ($("#CategoryList").val() == "" || $("#CategoryList").val() == "null" || $("#CategoryList").val() == null) {
                    console.log("CategoryList is empty");
                    AlertModal(getMessage("error"), getMessage("RequiredCategoryList"), BootstrapDialog.TYPE_DANGER, function () {
                    });
                    isValid = false;
                }
                else if (keyBool == null) {
                    console.log("KeyProject is empty");
                    AlertModal(getMessage("error"), getMessage("RequiredKeyProjects"), BootstrapDialog.TYPE_DANGER, function () {
                    });
                    isValid = false;
                }
                else if ($("#ExpectedDate").val() == "" || $("#ExpectedDate").val() == "null" || $("#ExpectedDate").val() == null) {
                    console.log("ExpectedDate is empty");
                    AlertModal(getMessage("error"), getMessage("RequiredExpectedDate"), BootstrapDialog.TYPE_DANGER, function () {
                    });
                    isValid = false;
                }
                //else if ($("#ReasonRCA").val() == "" || $("#ReasonRCA").val() == "null" || $("#ReasonRCA").val() == null) {
                //    console.log("ReasonRCA is empty");
                //    isValid = false;
                //}
                else {
                    isValid = true;
                }

                var me = getUrlVars()["user"];
                if (me == "admin") {
                    if ($("#ComplexityList").val() == "" || $("#ComplexityList").val() == "null" || $("#ComplexityList").val() == null) {
                        AlertModal(getMessage("error"), getMessage("RequiredComplexityType"), BootstrapDialog.TYPE_DANGER, function () {
                        });
                        isValid = false;
                    }
                    //else if (projBool == "" || projBool == null || projBool == "null") {
                    //    isValid = false;
                    //}
                    else if ($("#ProjectCRReceivedDate").val() == "" || $("#ProjectCRReceivedDate").val() == "null" || $("#ProjectCRReceivedDate").val() == null) {
                        AlertModal(getMessage("error"), getMessage("RequiredProjectCRReceivedDate"), BootstrapDialog.TYPE_DANGER, function () {
                        });
                        isValid = false;
                    }
                    else if ($("#FinalProjectCRReceivedDate").val() == "" || $("#FinalProjectCRReceivedDate").val() == "null" || $("#FinalProjectCRReceivedDate").val() == null) {
                        AlertModal(getMessage("error"), getMessage("RequiredFinalProjectCRReceivedDate"), BootstrapDialog.TYPE_DANGER, function () {
                        });
                        isValid = false;
                    }
                    else if ($("#NoOfCRReceivedDuringUAT").val() == "" || $("#NoOfCRReceivedDuringUAT").val() == "null" || $("#NoOfCRReceivedDuringUAT").val() == null) {
                        AlertModal(getMessage("error"), getMessage("RequiredNoOfCRReceivedDuringUAT"), BootstrapDialog.TYPE_DANGER, function () {
                        });
                        isValid = false;
                    }
                    else if ($("#UATDeliveryDate").val() == "" || $("#UATDeliveryDate").val() == "null" || $("#UATDeliveryDate").val() == null) {
                        AlertModal(getMessage("error"), getMessage("RequiredUATDeliveryDate"), BootstrapDialog.TYPE_DANGER, function () {
                        });
                        isValid = false;
                    }
                    //else if ($("#UATSignoffDate").val() == "" || $("#UATSignoffDate").val() == "null" || $("#UATSignoffDate").val() == null) {
                    //    isValid = false;
                    //}
                    //else if ($("#ProjectCRLiveDate").val() == "" || $("#ProjectCRLiveDate").val() == "null" || $("#ProjectCRLiveDate").val() == null) {
                    //    isValid = false;
                    //}
                    //else if ($("#FirstCommittedLiveDate").val() == "" || $("#FirstCommittedLiveDate").val() == "null" || $("#FirstCommittedLiveDate").val() == null) {
                    //    isValid = false;
                    //}
                    //else if ($("#TAT").val() == "" || $("#TAT").val() == "null" || $("#TAT").val() == null) {
                    //    isValid = false;
                    //}
                    else if ($("#NoOfShowstoppersPostGoLive").val() == "" || $("#NoOfShowstoppersPostGoLive").val() == "null" || $("#NoOfShowstoppersPostGoLive").val() == null) {
                        AlertModal(getMessage("error"), getMessage("RequiredNoOfShowstoppersPostGoLive"), BootstrapDialog.TYPE_DANGER, function () {
                        });
                        isValid = false;
                    }
                    else if ($("#UnitLead").val() == "" || $("#UnitLead").val() == "null" || $("#UnitLead").val() == null) {
                        AlertModal(getMessage("error"), getMessage("RequiredUnitLead"), BootstrapDialog.TYPE_DANGER, function () {
                        });
                        isValid = false;
                    }
                    else if ($("#Manager").val() == "" || $("#Manager").val() == "null" || $("#Manager").val() == null) {
                        AlertModal(getMessage("error"), getMessage("RequiredManager"), BootstrapDialog.TYPE_DANGER, function () {
                        });
                        isValid = false;
                    }
                    else {
                        isValid = true;
                    }
                }

                if (isValid) {
                    formdata.append("CrTitle", $("#CrTitle").val());
                    formdata.append("CrDescription", $("#CrDescription").val());
                    formdata.append("ComplexityList", $("#ComplexityList").val());
                    formdata.append("DepartmentList", $("#DepartmentList").val());
                    formdata.append("CategoryList", $("#CategoryList").val());
                    formdata.append("KeyProjects", keyBool);
                    formdata.append("ProjectCompletedSchedule", projBool);
                    formdata.append("ProjectCRReceivedDate", $("#ProjectCRReceivedDate").val());
                    formdata.append("FinalProjectCRReceivedDate", $("#FinalProjectCRReceivedDate").val());
                    formdata.append("NoOfCRReceivedDuringUAT", $("#NoOfCRReceivedDuringUAT").val());
                    formdata.append("UATDeliveryDate", $("#UATDeliveryDate").val());
                    formdata.append("UATSignoffDate", $("#UATSignoffDate").val());
                    formdata.append("ProjectCRLiveDate", $("#ProjectCRLiveDate").val());
                    formdata.append("FirstCommittedLiveDate", $("#FirstCommittedLiveDate").val());
                    formdata.append("TAT", $("#TAT").val());
                    formdata.append("NoOfShowstoppersPostGoLive", $("#NoOfShowstoppersPostGoLive").val());
                    formdata.append("UnitLead", $("#UnitLead").val());
                    formdata.append("Manager", $("#Manager").val());
                    formdata.append("ExpectedDate", $("#ExpectedDate").val());
                    formdata.append("ReasonRCA", $("#ReasonRCA").val());
                    formdata.append('uploadername', fileInput);
                    $.ajax({
                        url: '/Home/CRDetails',
                        type: "POST",
                        contentType: false, // Not to set any content header
                        processData: false, // Not to process data
                        data: formdata,
                        async: false,
                        success: function (result) {
                            AlertModal(getMessage("Success"), "Added successfully.", BootstrapDialog.TYPE_PRIMARY, function () {
                                window.location.href = window.location.href;  
                            });
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            AlertModal(getMessage("error"), xhr.responseText, BootstrapDialog.TYPE_DANGER, function () {
                            });
                            console.log(xhr.responseText);
                            AlertModal(getMessage("error"), thrownError, BootstrapDialog.TYPE_DANGER, function () {
                            });
                        }
                    });
                }
                else {
                    //AlertModal(getMessage("error"), "Please Enter Required fields input.", BootstrapDialog.TYPE_DANGER, function () {
                    //});
                }
            });
        });
        function DeleteFile(Fileid, FileName) {
            formdata.delete(FileName)
            $("#" + Fileid).remove();
            chkatchtbl();
        }
        function chkatchtbl() {
            if ($('#FilesList tr').length > 1) {
                $("#FilesList").css("visibility", "visible");
            } else {
                $("#FilesList").css("visibility", "hidden");
            }
        }
        function AlertModal(title, message, dialogType1, callback) {
            //debugger
            var okButtonText = getMessage("Okay");
            var dialogType = (dialogType1) ? dialogType1 : BootstrapDialog.TYPE_PRIMARY;

            BootstrapDialog.show({
                title: title,
                message: message,
                type: dialogType,
                closable: true,
                closeByBackdrop: false,
                closeByKeyboard: true,
                onhide: function (dialogRef) {
                    if (callback) {
                        callback();
                    }
                },
                buttons: [{
                    label: okButtonText,
                    hotkey: 14,
                    cssClass: 'btn btn-primary',
                    action: function (dialogItself) {
                        dialogItself.close();
                    }
                }]
            });
        }
        function getMessage(key, placeHolders) {
            var languageCurrent = 'en'; //Default English
            if (localStorage) {
                if (localStorage.LanguageCurrent != undefined) {
                    languageCurrent = localStorage.LanguageCurrent;
                }
            }
            return format(Languages[languageCurrent][key], placeHolders);
        }

        var Languages =
        {
            en:
            {
                error: "Message",
                errorMessage: "System error has occurred.",
                error403Message: 'Your session has been expired, please login again.',
                success: "Success",
                warning: "Warning",
                alert: "Alert",
                Delete: "Delete ",
                deleteConfirm: "Are you sure you want to delete ",
                deleteMessage: "Record deleted successfully.",
                Select: "--Select--",
                All: "All",
                Yes: "Yes",
                No: "No",
                Okay: "OK",
                Save: "Save",
                Close: "Close",
                Cancel: "Cancel",
                Browse: 'Browse',
                CancelConfirm: "Are you sure you want to cancel ?",
                cancelMessage: "Record canceled successfully.",
                errorTitle: "Correct following error(s).",
                FromDateRequiredMessage: "Please select From Date.",
                ToDateRequiredMessage: "Please select To Date.",
                resErrorFromToDate: "Please select From Date smaller or equal to To Date.",
                resErrorStartEnddate: "Please select Start Date smaller or equal to End Date.",
                InvalidEmail: 'Please enter a valid Email ID.',
                RequiredEmail: 'Please enter a Email ID.',
                RequiredUserName: 'Please enter a User Name.',
                ManageUser_RequiredEmail: 'Please enter an Email Id.',
                ManageUser_InvalidEmail: 'Please enter a valid Email Id.',
                EnterTwoDecimalPlaceOnly: "Please enter two decimal places only.",
                InvalidDateValidation: 'Please enter a valid Date.',
                NumberMaxLengthValidation: "Maximum {MAXLENGTH} digits can be allowed.",
                DecimalValidation: "Please enter a valid Amount.",
                MaxlengthFieldValidation: "Maximum {MAXLENGTH} characters can be allowed in {FIELD_NAME}.",
                NumberFieldMaxLengthValidation: "Maximum {MAXLENGTH} digits can be allowed in {FIELD_NAME}.",
                Login_ValidEmailAddress: "Please enter valid Email ID.",
                Login_RequiredPassword: "Please enter a Password.",
                RequiredRoleId: "Please select Role.",
                RequiredFirstName: 'Please enter a First Name.',
                RequiredLastName: 'Please enter a Last Name.',
                RequiredLevel: 'Please select Level.',
                ValidEmail: "Please enter a valid Email ID.",
                RequiredRole: "Please enter a Role.",
                OnlyNumericValidation: "Please enter only numeric values in {FIELD_NAME}.",
                RequiredAccountName: "Please enter Account Name.",
                RequiredName: "Please enter a Name.",
                RequiredRoleName: "Please select a Role.",
                RequiredTransactionTypeId: "Please select a Transaction Type.",
                RequiredAccountTypeId: "Please select an Account Type.",
                RequiredAmount: "Please enter an Amount.",
                RequiredSourceColumn: "Please enter a Source Column Name.",
                RequiredEffectiveDate: "Please select Effective From.",
                RequiredTransactionMode: "Please select Transaction Mode.",
                RequiredCalculationLogin: "Please enter a Calculation Logic.",
                ValidateAmount: "Please enter a valid Amount Percentage.",
                RequiredAccountCode: "Please enter an Account Code.",
                ActiveDirectoryUserNotFound: "Please enter User Name.",
                UserNotAvailableInActiveDirectory: "We could not found user in Active Directory.",
                ValidContactInformation: "Please Enter Valid Contact Information.",
                RequiredAccountIdentity: "Please enter Account ID.",
                deleteNotValid: "Can't Delete. This rule contains single accounting entry for transaction type.",
                insertNotValid: "Can't Insert. This rule not contain single entry of CR/DR for transaction type.",
                RollBack: "RollBack",
                rollBackConfirm: "Are you sure you want to rollback ",
                RequiredRMID: "Please Enter Manager's NT Id.",
                RequiredLeapId: "Please Enter FOS Leap Id.",
                RequiredDTCode: "Please Enter FOS DT Code.",
                RequiredComplexityType: "Please Select Complexity Type.",
                RequiredProjectCRReceivedDate: "Please Select Project / CR Received Date.",
                RequiredFinalProjectCRReceivedDate: "Please Select Final Project / CR Received Date.",
                RequiredNoOfCRReceivedDuringUAT: "Please Enter No. of CRs received post signoff of original CR.",
                RequiredUATDeliveryDate: "Please Select UAT delivery date.",
                RequiredNoOfShowstoppersPostGoLive: "Please Enter No. of Showstoppers post go live.",
                RequiredUnitLead: "Please Select Unit Lead.",
                RequiredManager: "Please Select Assigned To.",
                RequiredCRStatus: "Please Select Status.",
                RequiredKeyProjects: "Please Select Key Projects.",
                RequiredCategoryList: "Please Select Display Name.",
                RequiredDepartmentList: "Please Select Department.",
                RequiredCrDescription: "Please Enter CR Description.",
                RequiredCrTitle: "Please Enter CR Title.",
                RequiredExpectedDate: "Please Select Expected Date."
            }
        }

        function format(string, placeHolders) {
            placeHolders = typeof placeHolders === 'object' ? placeHolders : Array.prototype.slice.call(arguments, 1);

            if (string != undefined) {
                return string.replace(/\{\{|\}\}|\{(\w+)\}/g, function (m, n) {
                    if (m == "{{") { return "{"; }
                    if (m == "}}") { return "}"; }
                    return placeHolders[n];
                });
            }
            else {
                return "";
            }
        };
    </script>
<style>
    .form-group.required .control-label:after {
        content: "*";
        color: red;
    }

    .ui-datepicker td.ui-state-disabled > span {
        background: #e60000;
        color: white;
    }

    .ui-datepicker .ui-state-default {
        background: #009933;
        color: white;
    }

    .ui-datepicker td.ui-state-disabled {
        opacity: 100;
    }

    .control-label {
        font-family: Raleway-SemiBold;
        font-size: 14px;
        color: #555555;
        line-height: 1.4;
    }

    input.form-control {
        display: block;
        width: 100%;
        background: #f2f2f2;
        border-radius: 2px;
        /*font-family: Raleway-SemiBold;Cambria,Georgia,serif;*/
        font-family: Cambria,Georgia,serif;
        font-size: 18px;
        color: #686868;
        line-height: 1.2;
        padding: 0 28px;
        -webkit-transition: all 0.4s;
        -o-transition: all 0.4s;
        -moz-transition: all 0.4s;
        transition: all 0.4s;
        height: 40px;
        border: none;
    }

    textarea.form-control {
        display: block;
        width: 100%;
        background: #f2f2f2;
        border-radius: 2px;
        /*font-family: Raleway-SemiBold;Cambria,Georgia,serif;*/
        font-family: Cambria,Georgia,serif;
        font-size: 18px;
        color: #686868;
        line-height: 1.2;
        padding: 0 28px;
        -webkit-transition: all 0.4s;
        -o-transition: all 0.4s;
        -moz-transition: all 0.4s;
        transition: all 0.4s;
        border: none;
    }

    select.form-control {
        display: block;
        width: 100%;
        background: #f2f2f2;
        border-radius: 2px;
        /*font-family: Raleway-SemiBold;Cambria,Georgia,serif;*/
        font-family: Cambria,Georgia,serif;
        font-size: 18px;
        color: #686868;
        line-height: 1.2;
        padding: 0 28px;
        -webkit-transition: all 0.4s;
        -o-transition: all 0.4s;
        -moz-transition: all 0.4s;
        transition: all 0.4s;
        height: 40px;
        border: none;
    }

    .form-group-sm .form-control {
        font-size: 13px;
    }
</style>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "myForm" }))
{
    @Html.ValidationSummary(true, "", new
    {
        @class = "text-danger"
    })
    <div class="form-group-sm col-md-12" style="padding-top:30px;">
        <div id="title" class="form-group required col-md-6">
            @Html.LabelFor(model => model.CrTitle, "CR Title ", htmlAttributes: new
       {
           @class = "control-label col-md-5"
       })
            @Html.EditorFor(model => model.CrTitle, new { htmlAttributes = new { @class = "form-control col-md-6", @title = "Only Alpha-numeric allowed" } })
            @Html.ValidationMessageFor(model => model.CrTitle, "", new
            {
                  @class = "text-danger"
            })
            <span id="CrTitleError" style="color: red"></span>
        </div>
        <div id="description" class="form-group required col-md-6">
            @Html.LabelFor(model => model.CrDescription, "CR description ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.TextAreaFor(model => model.CrDescription, htmlAttributes: new
               {
                   @class = "form-control col-md-6"
               })
            @Html.ValidationMessageFor(model => model.CrDescription, "", new
            {
                  @class = "text-danger"
            })
        </div>
        <div id="complexity" class="form-group required col-md-6">
            @Html.LabelFor(model => model.ComplexityList, "Complexity (Including CRs)", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.DropDownListFor(model => model.ComplexityList, new SelectList(Enum.GetValues(typeof(CR_Details.Models.Complexity))),
                                  htmlAttributes: new
                                   {
                                    @class = "form-control col-md-6 select-complexity-placeholder"
                                  })
            @Html.ValidationMessageFor(model => model.ComplexityList, "", new
            {
                  @class = "text-danger"
            })
        </div>
    </div>
    <div class="form-group-sm col-md-12">
        <div class="form-group required col-md-6">
            @Html.LabelFor(model => model.DepartmentList, "Department ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.DropDownListFor(model => model.DepartmentList, new SelectList(Enum.GetValues(typeof(CR_Details.Models.Department))),
                                htmlAttributes: new
                                {
                                    @class = "form-control col-md-6 select-department-placeholder"
                                })
            @Html.ValidationMessageFor(model => model.DepartmentList, "", new
            {
                  @class = "text-danger"
            })
        </div>
        <div id="systemName" class="form-group required col-md-6">
            @Html.LabelFor(model => model.CategoryList, "Display Name ", htmlAttributes: new
                           {
                               @class = "control-label col-md-5"
                           })
            @Html.DropDownListFor(model => model.CategoryList, new SelectList(Enum.GetValues(typeof(CR_Details.Models.Category))),
                                  htmlAttributes: new
                                  {
                                    @class = "form-control col-md-6 select-category-placeholder"
                                  })
            @Html.ValidationMessageFor(model => model.CategoryList, "", new
            {
                  @class = "text-danger"
            })
        </div>

    </div>
    <div class="form-group-sm col-md-12">
        <div id="keyProject" class="form-group required col-md-6">
            @*@Html.LabelFor(model => model.KeyProjects, "Key Projects ", htmlAttributes: new
                {
                                @class = "control-label col-md-5"
                })
                @Html.RadioButtonFor(model => model.KeyProjects, true)Yes
                @Html.RadioButtonFor(model => model.KeyProjects, false) No*@
            @Html.LabelFor(model => model.KeyProjects, "Key Projects ", htmlAttributes: new
                            {
                                            @class = "control-label col-md-5"
                            })
            @Html.RadioButton("Radio", "Yes", new { onclick = "keyProjectsResult(this)" })  Yes
            @Html.RadioButton("Radio", "No", new { onclick = "keyProjectsResult(this)" })  No
        </div>
        <div id="crRcvDate" class="form-group required col-md-6">
            @Html.LabelFor(model => model.ProjectCRReceivedDate, "Project / CR Received Date", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.ProjectCRReceivedDate, new { htmlAttributes = new { @class = "form-control", type = "text" } })
            @Html.ValidationMessageFor(model => model.ProjectCRReceivedDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group-sm col-md-12">
        <div id="finalRcvDate" class="form-group required col-md-6">
            @Html.LabelFor(model => model.FinalProjectCRReceivedDate, "Final Project / CR Received Date", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.FinalProjectCRReceivedDate, new { htmlAttributes = new { @class = "form-control", type = "text" } })
            @Html.ValidationMessageFor(model => model.FinalProjectCRReceivedDate, "", new { @class = "text-danger" })
        </div>
        <div id="UATDate" class="form-group required col-md-6">
            @Html.LabelFor(model => model.UATDeliveryDate, "UAT delivery date ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.UATDeliveryDate, new { htmlAttributes = new { @class = "form-control", type = "text" } })
            @Html.ValidationMessageFor(model => model.UATDeliveryDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group-sm col-md-12">
        <div id="UATSignOffDate" class="form-group required col-md-6">
            @Html.LabelFor(model => model.UATSignoffDate, "UAT Signoff Date ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.UATSignoffDate, new { htmlAttributes = new { @class = "form-control", type = "text" } })
            @Html.ValidationMessageFor(model => model.UATSignoffDate, "", new { @class = "text-danger" })
        </div>
        <div id="crLiveDate" class="form-group required col-md-6">
            @Html.LabelFor(model => model.ProjectCRLiveDate, "Project / CR Live Date ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.ProjectCRLiveDate, new { htmlAttributes = new { @class = "form-control", type = "text" } })
            @Html.ValidationMessageFor(model => model.ProjectCRLiveDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group-sm col-md-12">
        <div id="fstCommDate" class="form-group required col-md-6">
            @Html.LabelFor(model => model.FirstCommittedLiveDate, "First Committed Live Date ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.FirstCommittedLiveDate, new { htmlAttributes = new { @class = "form-control", type = "text" } })
            @Html.ValidationMessageFor(model => model.FirstCommittedLiveDate, "", new { @class = "text-danger" })
        </div>
        <div id="lead" class="form-group required col-md-6">
            @Html.LabelFor(model => model.UnitLead, "Unit Lead ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.DropDownListFor(model => model.UnitLead, new SelectList(Enum.GetValues(typeof(CR_Details.Models.Lead))),
                                  htmlAttributes: new
                                  {
                                    @class = "form-control col-md-1 select-lead-placeholder"
                                  })
            @Html.ValidationMessageFor(model => model.UnitLead, "", new
            {
                  @class = "text-danger"
            })
        </div>
    </div>
    <div class="form-group-sm col-md-12">
        <div id="noCrRcv" class="form-group required col-md-6">
            @Html.LabelFor(model => model.NoOfCRReceivedDuringUAT, "No. of CRs received post signoff of original CR ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.NoOfCRReceivedDuringUAT, new { htmlAttributes = new { @class = "form-control", @min = "0" } })
            @Html.ValidationMessageFor(model => model.NoOfCRReceivedDuringUAT, "", new { @class = "text-danger" })
        </div>
        <div id="tat" class="form-group required col-md-6">
            @Html.LabelFor(model => model.TAT, "TAT (In Days) ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.TAT, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TAT, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group-sm required col-md-12">
        <div id="noShowstoppers" class="form-group col-md-6">
            @Html.LabelFor(model => model.NoOfShowstoppersPostGoLive, "# of Showstoppers post go live ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.NoOfShowstoppersPostGoLive, new { htmlAttributes = new { @class = "form-control", @min = "0" } })
            @Html.ValidationMessageFor(model => model.NoOfShowstoppersPostGoLive, "", new { @class = "text-danger" })
        </div>
        <div id="projCompSchdl" class="form-group required col-md-6">
            @Html.LabelFor(model => model.ProjectCompletedSchedule, "Project Completed as Schedule: ", htmlAttributes: new
                          {
                              @class = "control-label col-md-5"
                          })
            @Html.RadioButton("Radio", "Yes", new { onclick = "ProjectCompletedScheduleResult(this)" })  Yes
            @Html.RadioButton("Radio", "No", new { onclick = "ProjectCompletedScheduleResult(this)" })  No
        </div>
    </div>
    <div class="form-group-sm col-md-12">
        <div id="manager" class="form-group required col-md-6">
            @Html.LabelFor(model => model.Manager, "Assigned To: ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.DropDownListFor(model => model.Manager, new SelectList(Enum.GetValues(typeof(CR_Details.Models.Lead))),
                                 htmlAttributes: new
                                      {
                                   @class = "form-control col-md-6 select-manager-placeholder"
                                 })
            @Html.ValidationMessageFor(model => model.Manager, "", new
            {
                  @class = "text-danger"
            })
        </div>
        <div id="crLiveDate" class="form-group required col-md-6">
            @Html.LabelFor(model => model.ExpectedDate, "Expected Date ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.EditorFor(model => model.ExpectedDate, new { htmlAttributes = new { @class = "form-control", type = "text" } })
            @Html.ValidationMessageFor(model => model.ExpectedDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group-sm col-md-12">
        <div class="form-group col-md-6">
            @Html.LabelFor(model => model.ReasonRCA, "Reason / RCA ", htmlAttributes: new
            {
                @class = "control-label col-md-5"
            })
            @Html.TextAreaFor(model => model.ReasonRCA, htmlAttributes: new
            {
                @class = "form-control col-md-6"
            })
            @Html.ValidationMessageFor(model => model.ReasonRCA, "", new
            {
                  @class = "text-danger"
            })
        </div>
    </div>
    <div class="form-group-sm col-md-12">
        <div id="upload" class="form-group col-md-6">
            <div class="col-md-5">
                <label style="font-family: Raleway-SemiBold;font-size: 14px;color: #555555;line-height: 1.4;">Upload required Document<span style="content:'*';color:red">*</span></label>
            </div>
            <div class="col-md-6">
                <label for="fileInput" class="btn btn-primary">Browse</label>
                <input type="file" id="fileInput" name="AttachFile" multiple style="visibility:hidden;" />
                @*<input type="file" id="fileInput" name="AttachFile" class="filestyle" multiple="multiple" />*@
            </div>
            <table class="table" id="FilesList" style="visibility:hidden">
                <tr>
                    <th>
                        Attachment(s)
                    </th>
                    <th>
                        Action
                    </th>
                </tr>
            </table>
        </div>
    </div>
    <div class="modal-footer justify-content-between">
        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
        <button id="btnSubmit" type="button" class="btn btn-success">Save changes</button>
    </div>


}

